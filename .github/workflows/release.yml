name: Automated Builds

on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  package:
    strategy:
      matrix:
        include:
          - { name: ubuntu-22.04, os: ubuntu-22.04,   cross-target: '' }
          - { name: macos,        os: macos-latest,   cross-target: x86_64-apple-darwin }
          - { name: windows,      os: windows-latest, cross-target: '' }
    name: Package plugin binaries
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all git history
        run: git fetch --force --prune --tags --unshallow

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgl-dev libjack-dev libx11-xcb-dev  libxcb1-dev libxcb-dri2-0-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - uses: actions/cache@v4
        # FIXME: Caching `target/` causes the Windows runner to blow up after some time
        if: startsWith(matrix.os, 'windows')
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ matrix.name }}-${{ matrix.cross-target }}

      - uses: actions/cache@v4
        if: "!startsWith(matrix.os, 'windows')"
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.name }}-${{ matrix.cross-target }}

      - name: Set up Rust toolchain
        # Needed for SIMD
        uses: dtolnay/rust-toolchain@nightly
        with:
          # The macOS AArch64 build is done from an x86_64 macOS CI runner, so
          # it needs to be cross compiled
          targets: ${{ matrix.cross-target }}

      - name: Package target
        run: |
          cargo xtask bundle klyp --release

      - name: Determine build archive name
        run: |
          echo "ARCHIVE_NAME=KLYP-${{ github.ref_name }}-${{ matrix.name }}" >> "$GITHUB_ENV"

      - name: Move into a directory
        run: |
          mkdir -p "$ARCHIVE_NAME/$ARCHIVE_NAME"
          mv target/bundled/* "$ARCHIVE_NAME/$ARCHIVE_NAME"

#     - name: Add an OS-specific readme file with installation instructions
#       run: cp ".github/workflows/readme-${{ runner.os }}.txt" "$ARCHIVE_NAME/$ARCHIVE_NAME/README.txt"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}
